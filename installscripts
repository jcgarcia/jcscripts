#!/bin/bash

# ------------------------------------------------------------------------------
# Script Name:    installscripts
# Description:    Sets up the environment for the scripts repository.
# Usage:          installscripts
# Options:
#                 -h | --help       Show this help message
#                 -v | --version    Show script version
# Author:         Julio Cesar Garcia
# Date:           2025-03-20
# Version:        3.5
# ------------------------------------------------------------------------------

# Clone the repository if it doesn't exist
clone_repository() {
  REPO_URL="https://github.com/jcgarcia/jcscripts.git"
  INSTALL_DIR="$HOME/.scripts"

  if [[ ! -d "$INSTALL_DIR" ]]; then
    echo "Cloning the repository into $INSTALL_DIR..."
    git clone "$REPO_URL" "$INSTALL_DIR" || {
      echo "ERROR: Failed to clone the repository. Please check your Git configuration."
      exit 1
    }
  else
    echo "The directory $INSTALL_DIR already exists. Pulling the latest changes..."
    cd "$INSTALL_DIR" || exit 1
    git fetch origin || {
      echo "ERROR: Failed to fetch the latest changes. Please check your Git configuration."
      exit 1
    }
    echo "Resetting local branch to match remote branch..."
    git reset --hard origin/main || {
      echo "ERROR: Failed to reset to the latest changes. Please check your Git configuration."
      exit 1
    }
  fi

  # Dynamically set the library path after cloning
  LIB_ARCHIVE="$INSTALL_DIR/lib/scripts.ar"
}

# Validate the library file
validate_library() {
  LIB_ARCHIVE="$HOME/.scripts/lib/scripts.ar"  # Dynamically set the library path
  if [[ ! -f "$LIB_ARCHIVE" ]]; then
    echo "ERROR: Library file $LIB_ARCHIVE not found. Aborting installation."
    exit 1
  fi
}

# Extract scripts from the library
extract_scripts() {
  echo "Extracting scripts from library..."
  TARGET_DIR="$HOME/.scripts"
  mkdir -p "$TARGET_DIR"

  # Navigate to the target directory for extraction
  cd "$TARGET_DIR" || exit 1
  ar x "$LIB_ARCHIVE" || {
    echo "ERROR: Failed to extract scripts from $LIB_ARCHIVE. Please check the archive."
    exit 1
  }

  echo "Scripts extracted to $TARGET_DIR."
}

# Ensure the .jcscripts configuration file
ensure_config_file() {
  CONFIG_FILE="$HOME/.scripts/.jcscripts"
  HOME_CONFIG_FILE="$HOME/.jcscripts"

  # Create default configuration in the .scripts directory
  echo "Creating or updating default configuration file: $CONFIG_FILE..."
  cat <<EOL > "$CONFIG_FILE"
# Configuration for scripts
EDITOR="vi"
SCRIPTS_DIR="~/.scripts"
GITHUB_REPO="git@github.com:jcgarcia/jcscripts.git"
SSH_KEY="~/.ssh/jc.pem"
EOL
  echo "Default configuration file created or updated in $CONFIG_FILE."

  # Overwrite the configuration file in the home directory
  echo "Copying configuration file to $HOME/.jcscripts..."
  cp "$CONFIG_FILE" "$HOME_CONFIG_FILE"
  echo "Configuration file updated at $HOME/.jcscripts."
}

# Make scripts executable
make_executable() {
  echo "Making valid scripts executable..."
  find "$HOME/.scripts" -type f -exec chmod +x {} \;
  echo "Scripts made executable."
}

# Add scripts directory to PATH
update_path() {
  echo "Adding scripts directory to PATH..."

  # Determine the shell profile to update
  SHELL_PROFILE=""
  case "$SHELL" in
    */bash)
      SHELL_PROFILE="$HOME/.bashrc"
      ;;
    */ash)
      SHELL_PROFILE="$HOME/.profile"
      ;;
    */csh | */tcsh)
      SHELL_PROFILE="$HOME/.cshrc"
      ;;
    */ksh)
      SHELL_PROFILE="$HOME/.kshrc"
      ;;
    *)
      echo "WARNING: Unsupported shell detected. Please manually add $HOME/.scripts to your PATH."
      return
      ;;
  esac

  # Append PATH modification to the profile if not already added
  if [[ -n "$SHELL_PROFILE" ]] && ! grep -q "export PATH=\$PATH:$HOME/.scripts" "$SHELL_PROFILE"; then
    echo "export PATH=\$PATH:$HOME/.scripts" >> "$SHELL_PROFILE"
  fi

  # Apply PATH update immediately in the current session
  export PATH="$PATH:$HOME/.scripts"
  echo "PATH updated for the current session: $PATH"

  # Reload the shell configuration for the current session
  if [[ -f "$SHELL_PROFILE" ]]; then
    echo "Reloading shell configuration from $SHELL_PROFILE..."
    source "$SHELL_PROFILE" || . "$SHELL_PROFILE"
  fi

  # Verify that the PATH update is effective
  if [[ ":$PATH:" != *":$HOME/.scripts:"* ]]; then
    echo "ERROR: PATH update failed. Please manually add $HOME/.scripts to your PATH."
    return 1
  fi

  echo "PATH updated for the current session and saved to $SHELL_PROFILE."
}

# Mark installation as complete
mark_installation() {
  MARKER="$HOME/.scripts_installed"
  echo "Marking the installation as complete..."
  touch "$MARKER"
  echo "Installation marked with $MARKER."
}

# Function to extract the version from the script header of the current script
extract_version() {
    local script_file="$0"  # Referring to the current script
    grep -i '^# Version:' "$script_file" | awk -F': ' '{print $2}'
}

# Helper function to display the version
show_version() {
    version=$(extract_version)
    echo -e "${BOLD}${CYAN}Version: ${version}${RESET}" 
}

# Check and install required tools
install_required_tools() {
  echo "Checking for required tools..."

  # Define required tools and their corresponding packages
  local tools=(
    "ar:binutils"       # 'ar' command from binutils
    "column:util-linux" # 'column' command from util-linux
    "tput:ncurses"      # 'tput' command from ncurses
  )

  for tool in "${tools[@]}"; do
    local command="${tool%%:*}"  # Extract the command (e.g., 'ar')
    local package="${tool##*:}" # Extract the package (e.g., 'binutils')

    if ! command -v "$command" &> /dev/null; then
      echo "Installing missing tool: $command (package: $package)..."
      if [[ -x "$(command -v apt)" ]]; then
        sudo apt install -y "$package"
      elif [[ -x "$(command -v dnf)" ]]; then
        sudo dnf install -y "$package"
      elif [[ -x "$(command -v pacman)" ]]; then
        sudo pacman -S --noconfirm "$package"
      elif [[ -x "$(command -v apk)" ]]; then
        sudo apk add "$package"
      else
        echo "ERROR: Package manager not detected. Please install $package manually."
        exit 1
      fi
      echo "$command installed successfully."
    else
      echo "$command is already installed."
    fi
  done
}

# Function to add the .scripts directory to PATH
add_to_path() {
  local shell_config

  # Determine the appropriate shell configuration file
  if [[ "$SHELL" == *"bash"* ]]; then
    shell_config="$HOME/.bashrc"
  elif [[ "$SHELL" == *"ash"* ]]; then
    shell_config="$HOME/.profile"
  else
    echo "Unsupported shell. Please add the following line to your shell configuration file manually:"
    echo 'export PATH="$HOME/.scripts:$PATH"'
    return
  fi

  # Add the .scripts directory to PATH if not already present
  if ! grep -q 'export PATH="$HOME/.scripts:$PATH"' "$shell_config"; then
    echo 'export PATH="$HOME/.scripts:$PATH"' >> "$shell_config"
    echo "Added .scripts directory to PATH in $shell_config."
  else
    echo "The .scripts directory is already in your PATH."
  fi

  # Reload the shell configuration
  if [[ "$SHELL" == *"ash"* ]]; then
    source "$HOME/.profile"
  else
    source "$HOME/.bashrc"
  fi
}

# Main function
main() {
  echo "Starting installation process..."

  # Clone the repository first
  clone_repository

  # Dynamically set the library path after cloning
  LIB_ARCHIVE="$HOME/.scripts/lib/scripts.ar"

  # Ensure required tools are installed
  install_required_tools

  # Ensure the configuration file exists
  ensure_config_file

  # Validate the library file
  validate_library

  # Extract scripts from the library
  extract_scripts

  # Make scripts executable
  make_executable

  # Update the PATH
  update_path

  # Add .scripts directory to PATH
  add_to_path

  # Mark the installation as complete
  mark_installation

  echo "Installation complete! Reload your config file (e.g. 'source .bashrc') to run the scripts from any location."

  # Handle script options
  case "$1" in
    -h|--help)
      echo "Usage: installscripts [options]"
      echo "Options:"
      echo "  -h | --help       Show this help message"
      echo "  -v | --version    Show script version"
      exit 0
      ;;
    -v|--version)
      show_version
      exit 0
      ;;
    *)
      ;;
  esac
}

# Execute the main function
main "$@"
